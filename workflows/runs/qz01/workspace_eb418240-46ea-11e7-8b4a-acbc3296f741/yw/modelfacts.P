% FACT: program(program_id, program_name, qualified_program_name, begin_annotation_id, end_annotation_id).
program(1, 'BranchingWorkflow', 'BranchingWorkflow', 1, 57).
program(2, 'Setup', 'BranchingWorkflow/Setup', 3, 10).
program(3, 'FileToDataStream', 'BranchingWorkflow/FileToDataStream', 11, 14).
program(4, 'EnvironmentTagger', 'BranchingWorkflow/EnvironmentTagger', 15, 21).
program(5, 'FilterToJustMarine', 'BranchingWorkflow/FilterToJustMarine', 22, 28).
program(6, 'FilterExcludingMarine', 'BranchingWorkflow/FilterExcludingMarine', 29, 35).
program(7, 'WoRMSLookup', 'BranchingWorkflow/WoRMSLookup', 36, 39).
program(8, 'GBIFLookup', 'BranchingWorkflow/GBIFLookup', 40, 43).
program(9, 'StreamMerge', 'BranchingWorkflow/StreamMerge', 44, 48).
program(10, 'CsvFileWriter', 'BranchingWorkflow/CsvFileWriter', 49, 54).

% FACT: workflow(program_id).
workflow(1).

% FACT: function(program_id).

% FACT: has_subprogram(program_id, subprogram_id).
has_subprogram(1, 2).
has_subprogram(1, 3).
has_subprogram(1, 4).
has_subprogram(1, 5).
has_subprogram(1, 6).
has_subprogram(1, 7).
has_subprogram(1, 8).
has_subprogram(1, 9).
has_subprogram(1, 10).

% FACT: port(port_id, port_type, port_name, qualified_port_name, port_annotation_id, data_id).
port(1, 'IN', 'DwCA_URI', 'BranchingWorkflow<-DwCA_URI', 2, 1).
port(27, 'OUT', 'OutputFile', 'BranchingWorkflow->OutputFile', 55, 15).
port(28, 'OUT', 'LogFile', 'BranchingWorkflow->LogFile', 56, 16).
port(2, 'PARAM', 'DwCA_URI', 'BranchingWorkflow/Setup<-DwCA_URI', 4, 2).
port(3, 'IN', 'DarwinCoreArchive', 'BranchingWorkflow/Setup<-DarwinCoreArchive', 5, 3).
port(4, 'OUT', 'Workspace', 'BranchingWorkflow/Setup->Workspace', 7, 4).
port(5, 'OUT', 'OccurrenceFile', 'BranchingWorkflow/Setup->OccurrenceFile', 8, 5).
port(6, 'IN', 'OccurrenceFile', 'BranchingWorkflow/FileToDataStream<-OccurrenceFile', 12, 5).
port(7, 'OUT', 'DataRecord', 'BranchingWorkflow/FileToDataStream->DataRecord', 13, 6).
port(8, 'IN', 'DataRecord', 'BranchingWorkflow/EnvironmentTagger<-DataRecord', 16, 6).
port(9, 'OUT', 'LogFile', 'BranchingWorkflow/EnvironmentTagger->LogFile', 17, 7).
port(10, 'OUT', 'TaggedDataRecord', 'BranchingWorkflow/EnvironmentTagger->TaggedDataRecord', 20, 8).
port(11, 'IN', 'TaggedDataRecord', 'BranchingWorkflow/FilterToJustMarine<-TaggedDataRecord', 23, 8).
port(12, 'OUT', 'LogFile', 'BranchingWorkflow/FilterToJustMarine->LogFile', 24, 7).
port(13, 'OUT', 'Marine', 'BranchingWorkflow/FilterToJustMarine->Marine', 27, 9).
port(14, 'IN', 'TaggedDataRecord', 'BranchingWorkflow/FilterExcludingMarine<-TaggedDataRecord', 30, 8).
port(15, 'OUT', 'LogFile', 'BranchingWorkflow/FilterExcludingMarine->LogFile', 31, 7).
port(16, 'OUT', 'NotMarine', 'BranchingWorkflow/FilterExcludingMarine->NotMarine', 34, 10).
port(17, 'IN', 'Marine', 'BranchingWorkflow/WoRMSLookup<-Marine', 37, 9).
port(18, 'OUT', 'WoRMSOutput', 'BranchingWorkflow/WoRMSLookup->WoRMSOutput', 38, 11).
port(19, 'IN', 'NotMarine', 'BranchingWorkflow/GBIFLookup<-NotMarine', 41, 10).
port(20, 'OUT', 'GBIFOutput', 'BranchingWorkflow/GBIFLookup->GBIFOutput', 42, 12).
port(21, 'IN', 'GBIFOutput', 'BranchingWorkflow/StreamMerge<-GBIFOutput', 45, 12).
port(22, 'IN', 'WoRMSOutput', 'BranchingWorkflow/StreamMerge<-WoRMSOutput', 46, 11).
port(23, 'OUT', 'MergedStream', 'BranchingWorkflow/StreamMerge->MergedStream', 47, 13).
port(24, 'IN', 'Workspace', 'BranchingWorkflow/CsvFileWriter<-Workspace', 50, 4).
port(25, 'IN', 'MergedStream', 'BranchingWorkflow/CsvFileWriter<-MergedStream', 51, 13).
port(26, 'OUT', 'OutputFile', 'BranchingWorkflow/CsvFileWriter->OutputFile', 52, 14).

% FACT: port_alias(port_id, alias).

% FACT: port_uri_template(port_id, uri).
port_uri_template(3, '{DwCA_URI}').
port_uri_template(5, 'file:{Workspace}/dwca_extracted_occurrences.txt').
port_uri_template(9, 'file:{LogFile}').
port_uri_template(12, 'file:{LogFile}').
port_uri_template(15, 'file:{LogFile}').
port_uri_template(26, 'file:{Workspace}/mergedoutputfile.csv').

% FACT: has_in_port(block_id, port_id).
has_in_port(1, 1).
has_in_port(2, 2).
has_in_port(2, 3).
has_in_port(3, 6).
has_in_port(4, 8).
has_in_port(5, 11).
has_in_port(6, 14).
has_in_port(7, 17).
has_in_port(8, 19).
has_in_port(9, 21).
has_in_port(9, 22).
has_in_port(10, 24).
has_in_port(10, 25).

% FACT: has_out_port(block_id, port_id).
has_out_port(1, 27).
has_out_port(1, 28).
has_out_port(2, 4).
has_out_port(2, 5).
has_out_port(3, 7).
has_out_port(4, 9).
has_out_port(4, 10).
has_out_port(5, 12).
has_out_port(5, 13).
has_out_port(6, 15).
has_out_port(6, 16).
has_out_port(7, 18).
has_out_port(8, 20).
has_out_port(9, 23).
has_out_port(10, 26).

% FACT: data(data_id, data_name, qualified_data_name).
data(1, 'DwCA_URI', 'DwCA_URI').
data(15, 'OutputFile', 'OutputFile').
data(16, 'LogFile', 'LogFile').
data(2, 'DwCA_URI', 'BranchingWorkflow.DwCA_URI').
data(3, 'DarwinCoreArchive', 'BranchingWorkflow.DarwinCoreArchive').
data(4, 'Workspace', 'BranchingWorkflow.Workspace').
data(5, 'OccurrenceFile', 'BranchingWorkflow.OccurrenceFile').
data(6, 'DataRecord', 'BranchingWorkflow.DataRecord').
data(7, 'LogFile', 'BranchingWorkflow.LogFile').
data(8, 'TaggedDataRecord', 'BranchingWorkflow.TaggedDataRecord').
data(9, 'Marine', 'BranchingWorkflow.Marine').
data(10, 'NotMarine', 'BranchingWorkflow.NotMarine').
data(11, 'WoRMSOutput', 'BranchingWorkflow.WoRMSOutput').
data(12, 'GBIFOutput', 'BranchingWorkflow.GBIFOutput').
data(13, 'MergedStream', 'BranchingWorkflow.MergedStream').
data(14, 'OutputFile', 'BranchingWorkflow.OutputFile').

% FACT: channel(channel_id, data_id).
channel(1, 2).
channel(2, 5).
channel(3, 6).
channel(4, 8).
channel(5, 8).
channel(6, 9).
channel(7, 10).
channel(8, 12).
channel(9, 11).
channel(10, 4).
channel(11, 13).
channel(12, 15).
channel(13, 16).
channel(14, 1).
channel(15, 14).
channel(16, 7).

% FACT: port_connects_to_channel(port_id, channel_id).
port_connects_to_channel(2, 1).
port_connects_to_channel(5, 2).
port_connects_to_channel(6, 2).
port_connects_to_channel(7, 3).
port_connects_to_channel(8, 3).
port_connects_to_channel(10, 4).
port_connects_to_channel(11, 4).
port_connects_to_channel(10, 5).
port_connects_to_channel(14, 5).
port_connects_to_channel(13, 6).
port_connects_to_channel(17, 6).
port_connects_to_channel(16, 7).
port_connects_to_channel(19, 7).
port_connects_to_channel(20, 8).
port_connects_to_channel(21, 8).
port_connects_to_channel(18, 9).
port_connects_to_channel(22, 9).
port_connects_to_channel(4, 10).
port_connects_to_channel(24, 10).
port_connects_to_channel(23, 11).
port_connects_to_channel(25, 11).
port_connects_to_channel(26, 12).
port_connects_to_channel(15, 13).
port_connects_to_channel(2, 14).
port_connects_to_channel(26, 15).
port_connects_to_channel(15, 16).

% FACT: inflow_connects_to_channel(port_id, channel_id).
inflow_connects_to_channel(1, 1).
inflow_connects_to_channel(1, 14).

% FACT: outflow_connects_to_channel(port_id, channel_id).
outflow_connects_to_channel(27, 12).
outflow_connects_to_channel(28, 13).
outflow_connects_to_channel(27, 15).
outflow_connects_to_channel(28, 16).

% FACT: uri_variable(uri_variable_id, variable_name, port_id).
uri_variable(1, 'DwCA_URI', 3).
uri_variable(2, 'Workspace', 5).
uri_variable(3, 'LogFile', 9).
uri_variable(4, 'LogFile', 12).
uri_variable(5, 'LogFile', 15).
uri_variable(6, 'Workspace', 26).

% FACT: log_template(log_template_id, port_id, entry_template, log_annotation_id).
log_template(1, 9, '{timestamp} [{loglevel}] ACTOR<{actorname}> -> isMarine={isMarineValue} for occurrenceID={occurrenceId}', 19).
log_template(2, 12, '{timestamp} [{loglevel}] ACTOR<{actorname}> -> [{filterKey}]=[{matchValue}]:{match}. Passing occurrenceID={occurrenceID}', 26).
log_template(3, 15, '{timestamp} [{loglevel}] ACTOR<{actorname}> -> [{filterKey}]=[{matchValue}]:{match}. Passing occurrenceID={occurrenceID}', 33).

% FACT: log_template_variable(log_variable_id, variable_name, log_template_id).
log_template_variable(1, 'timestamp', 1).
log_template_variable(2, 'loglevel', 1).
log_template_variable(3, 'actorname', 1).
log_template_variable(4, 'isMarineValue', 1).
log_template_variable(5, 'occurrenceId', 1).
log_template_variable(6, 'timestamp', 2).
log_template_variable(7, 'loglevel', 2).
log_template_variable(8, 'actorname', 2).
log_template_variable(9, 'filterKey', 2).
log_template_variable(10, 'matchValue', 2).
log_template_variable(11, 'match', 2).
log_template_variable(12, 'occurrenceID', 2).
log_template_variable(13, 'timestamp', 3).
log_template_variable(14, 'loglevel', 3).
log_template_variable(15, 'actorname', 3).
log_template_variable(16, 'filterKey', 3).
log_template_variable(17, 'matchValue', 3).
log_template_variable(18, 'match', 3).
log_template_variable(19, 'occurrenceID', 3).

% FACT: assert(program_id, subject_id, predicate, object_id).

